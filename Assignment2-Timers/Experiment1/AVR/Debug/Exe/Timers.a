;/*******************************************************
;Project : Timers
;Version : 1.00
;Date    : 12/19/2020
;Author  : Alireza Majari
;Company : P48
;Comments:
;This is assignment#1 of Microprocessor Lab.
;kharazmi University of Tehran
;
;
;Chip type               : ATmega16
;Program type            : Application
;AVR Core Clock frequency: 12.000000 MHz
;Memory model            : Small
;External RAM size       : 0
;Data Stack size         : 256
;*******************************************************/
;
;#include <mega16.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x40
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0xB0
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x20
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x30
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0xA0
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0xB0
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x10
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;#include <delay.h>
;
;// Declare your global variables her
;int num = 0;
;int delay;
;
;// Timer1 overflow interrupt service routine
;interrupt [TIM1_OVF] void timer1_ovf_isr(void)
; 0000 001D {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0000 001E     ++delay;
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
;PCODE: $00000011 VOL: 0
; 0000 001F     if(delay == 60){
;PCODE: $00000012 VOL: 0
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
; 0000 0020         if(num < 10){
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
; 0000 0021             PORTC =  num;
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
; 0000 0022         } else {
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
; 0000 0023             num = 0 ;
;PCODE: $0000001C VOL: 0
; 0000 0024             PORTC = num;
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
; 0000 0025         }
;PCODE: $0000001F VOL: 0
; 0000 0026         num++;
;PCODE: $00000020 VOL: 0
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
; 0000 0027     }
; 0000 0028 
; 0000 0029     TCNT1H=0xFF;
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
; 0000 002A     TCNT1L=0xF0;
;PCODE: $00000026 VOL: 0
;PCODE: $00000027 VOL: 0
; 0000 002B }
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
;PCODE: $0000002A VOL: 0
;
;void main(void)
; 0000 002E {
;PCODE: $0000002B VOL: 0
; 0000 002F     TCCR1A=0x00;
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
; 0000 0030     TCCR1B=0x01;
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
; 0000 0031     TCNT1H=0xFF;
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
; 0000 0032     TCNT1L=0xF0;
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
; 0000 0033 
; 0000 0034     MCUCR=(0<<ISC11) | (0<<ISC10) | (0<<ISC01) | (0<<ISC00);
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
; 0000 0035     MCUCSR=(0<<ISC2);
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
; 0000 0036 
; 0000 0037     // Timer(s)/Counter(s) Interrupt(s) initialization
; 0000 0038     TIMSK=(0<<OCIE2) | (0<<TOIE2) | (0<<TICIE1) | (0<<OCIE1A) | (0<<OCIE1B) | (1<<TOIE1) | (0<<OCIE0) | (0<<TOIE0);
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
; 0000 0039 
; 0000 003A     #asm("sei")
;PCODE: $0000003A VOL: 0
	sei
;PCODE: $0000003B VOL: 0
; 0000 003B 
; 0000 003C     DDRC=0xff;
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
; 0000 003D     PORTC=0xff;
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
; 0000 003E 
; 0000 003F     while (1) {
;PCODE: $00000040 VOL: 0
; 0000 0040 
; 0000 0041     }
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
; 0000 0042 }
;PCODE: $00000043 VOL: 0
;PCODE: $00000044 VOL: 0
;PCODE: $00000045 VOL: 0
