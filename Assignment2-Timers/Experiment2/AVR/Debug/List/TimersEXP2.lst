
AVRASM ver. 2.1.30  F:\Fucking University Stuff\Micro Lab\Assignment2-Timers\Experiment2\AVR\Debug\List\TimersEXP2.asm Sun Dec 20 01:44:31 2020

F:\Fucking University Stuff\Micro Lab\Assignment2-Timers\Experiment2\AVR\Debug\List\TimersEXP2.asm(1088): warning: Register r4 already defined by the .DEF directive
F:\Fucking University Stuff\Micro Lab\Assignment2-Timers\Experiment2\AVR\Debug\List\TimersEXP2.asm(1089): warning: Register r5 already defined by the .DEF directive
F:\Fucking University Stuff\Micro Lab\Assignment2-Timers\Experiment2\AVR\Debug\List\TimersEXP2.asm(1090): warning: Register r6 already defined by the .DEF directive
F:\Fucking University Stuff\Micro Lab\Assignment2-Timers\Experiment2\AVR\Debug\List\TimersEXP2.asm(1091): warning: Register r7 already defined by the .DEF directive
F:\Fucking University Stuff\Micro Lab\Assignment2-Timers\Experiment2\AVR\Debug\List\TimersEXP2.asm(1092): warning: Register r8 already defined by the .DEF directive
F:\Fucking University Stuff\Micro Lab\Assignment2-Timers\Experiment2\AVR\Debug\List\TimersEXP2.asm(1093): warning: Register r9 already defined by the .DEF directive
F:\Fucking University Stuff\Micro Lab\Assignment2-Timers\Experiment2\AVR\Debug\List\TimersEXP2.asm(1094): warning: Register r10 already defined by the .DEF directive
F:\Fucking University Stuff\Micro Lab\Assignment2-Timers\Experiment2\AVR\Debug\List\TimersEXP2.asm(1095): warning: Register r11 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V3.12 Advanced
                 ;(C) Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Build configuration    : Debug
                 ;Chip type              : ATmega16
                 ;Program type           : Application
                 ;Clock frequency        : 12.000000 MHz
                 ;Memory model           : Small
                 ;Optimize for           : Size
                 ;(s)printf features     : int, width
                 ;(s)scanf features      : int, width
                 ;External RAM size      : 0
                 ;Data Stack size        : 256 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote 'char' to 'int': Yes
                 ;'char' is unsigned     : Yes
                 ;8 bit enums            : Yes
                 ;Global 'const' stored in FLASH: Yes
                 ;Enhanced function parameter passing: Yes
                 ;Enhanced core instructions: On
                 ;Automatic register allocation for global variables: On
                 ;Smart register allocation: On
                 
                 	#define _MODEL_SMALL_
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega16
                 	#pragma AVRPART MEMORY PROG_FLASH 16384
                 	#pragma AVRPART MEMORY EEPROM 512
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 1024
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x60
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU GICR=0x3B
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0060
                 	.EQU __SRAM_END=0x045F
                 	.EQU __DSTACK_SIZE=0x0100
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	PUSH R26
                 	PUSH R27
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	POP  R27
                 	POP  R26
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EX
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __EEPROMRDD
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	CALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF _num=R4
                 	.DEF _num_msb=R5
                 	.DEF _delay0=R6
                 	.DEF _delay0_msb=R7
                 	.DEF _delay1=R8
                 	.DEF _delay1_msb=R9
                 	.DEF _turn=R10
                 	.DEF _turn_msb=R11
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 940c 003b 	JMP  __RESET
000002 940c 0000 	JMP  0x00
000004 940c 0000 	JMP  0x00
000006 940c 0000 	JMP  0x00
000008 940c 0000 	JMP  0x00
00000a 940c 0000 	JMP  0x00
00000c 940c 0000 	JMP  0x00
00000e 940c 0000 	JMP  0x00
000010 940c 00d0 	JMP  _timer1_ovf_isr
000012 940c 008b 	JMP  _timer0_ovf_isr
000014 940c 0000 	JMP  0x00
000016 940c 0000 	JMP  0x00
000018 940c 0000 	JMP  0x00
00001a 940c 0000 	JMP  0x00
00001c 940c 0000 	JMP  0x00
00001e 940c 0000 	JMP  0x00
000020 940c 0000 	JMP  0x00
000022 940c 0000 	JMP  0x00
000024 940c 0000 	JMP  0x00
000026 940c 0000 	JMP  0x00
000028 940c 0000 	JMP  0x00
                 
                 ;GLOBAL REGISTER VARIABLES INITIALIZATION
                 __REG_VARS:
00002a 0000
00002b 0000      	.DB  0x0,0x0,0x0,0x0
00002c 0000
00002d 0001      	.DB  0x0,0x0,0x1,0x0
                 
                 _0x2020060:
F:\Fucking University Stuff\Micro Lab\Assignment2-Timers\Experiment2\AVR\Debug\List\TimersEXP2.asm(1132): warning: .cseg .db misalignment - padding zero byte
00002e 0001      	.DB  0x1
                 _0x2020000:
00002f 4e2d
000030 4e41
000031 4900
000032 464e      	.DB  0x2D,0x4E,0x41,0x4E,0x0,0x49,0x4E,0x46
F:\Fucking University Stuff\Micro Lab\Assignment2-Timers\Experiment2\AVR\Debug\List\TimersEXP2.asm(1135): warning: .cseg .db misalignment - padding zero byte
000033 0000      	.DB  0x0
                 
                 __GLOBAL_INI_TBL:
000034 0008      	.DW  0x08
000035 0004      	.DW  0x04
000036 0054      	.DW  __REG_VARS*2
                 
000037 0001      	.DW  0x01
000038 0160      	.DW  __seed_G101
000039 005c      	.DW  _0x2020060*2
                 
                 _0xFFFFFFFF:
00003a 0000      	.DW  0
                 
                 #define __GLOBAL_INI_TBL_PRESENT 1
                 
                 __RESET:
00003b 94f8      	CLI
00003c 27ee      	CLR  R30
00003d bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
00003e e0f1      	LDI  R31,1
00003f bffb      	OUT  GICR,R31
000040 bfeb      	OUT  GICR,R30
000041 bfe5      	OUT  MCUCR,R30
                 
                 ;CLEAR R2-R14
000042 e08d      	LDI  R24,(14-2)+1
000043 e0a2      	LDI  R26,2
000044 27bb      	CLR  R27
                 __CLEAR_REG:
000045 93ed      	ST   X+,R30
000046 958a      	DEC  R24
000047 f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
000048 e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
000049 e094      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
00004a e6a0      	LDI  R26,__SRAM_START
                 __CLEAR_SRAM:
00004b 93ed      	ST   X+,R30
00004c 9701      	SBIW R24,1
00004d f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
00004e e6e8      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
00004f e0f0      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
000050 9185      	LPM  R24,Z+
000051 9195      	LPM  R25,Z+
000052 9700      	SBIW R24,0
000053 f061      	BREQ __GLOBAL_INI_END
000054 91a5      	LPM  R26,Z+
000055 91b5      	LPM  R27,Z+
000056 9005      	LPM  R0,Z+
000057 9015      	LPM  R1,Z+
000058 01bf      	MOVW R22,R30
000059 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
00005a 9005      	LPM  R0,Z+
00005b 920d      	ST   X+,R0
00005c 9701      	SBIW R24,1
00005d f7e1      	BRNE __GLOBAL_INI_LOOP
00005e 01fb      	MOVW R30,R22
00005f cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
000060 e5ef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
000061 bfed      	OUT  SPL,R30
000062 e0e4      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
000063 bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
000064 e6c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
000065 e0d1      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
000066 940c 00f1 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0x160
                 
                 	.CSEG
                 ;/*******************************************************
                 ;Project : TimersEXP2
                 ;Version : 1.00
                 ;Date    : 12/19/2020
                 ;Author  : Alireza Majari
                 ;Company : P48
                 ;Comments:
                 ;This is assignment#1 of Microprocessor Lab.
                 ;kharazmi University of Tehran
                 ;
                 ;
                 ;Chip type               : ATmega16
                 ;Program type            : Application
                 ;AVR Core Clock frequency: 12.000000 MHz
                 ;Memory model            : Small
                 ;External RAM size       : 0
                 ;Data Stack size         : 256
                 ;*******************************************************/
                 ;
                 ;#include <mega16.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x40
                 	.EQU __sm_mask=0xB0
                 	.EQU __sm_powerdown=0x20
                 	.EQU __sm_powersave=0x30
                 	.EQU __sm_standby=0xA0
                 	.EQU __sm_ext_standby=0xB0
                 	.EQU __sm_adc_noise_red=0x10
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 ;#include <delay.h>
                 ;#include <math.h>
                 ;
                 ;// Declare your global variables her
                 ;int num = 0;
                 ;int delay0;
                 ;int delay1;
                 ;int turn=1;
                 ;
                 ;int getdigit(int num, int n)
                 ; 0000 001F {
                 
                 	.CSEG
                 _getdigit:
                 ; .FSTART _getdigit
                 ; 0000 0020     int r;
                 ; 0000 0021     r = num / pow(10, n);
000068 93ba      	ST   -Y,R27
000069 93aa      	ST   -Y,R26
00006a 931a      	ST   -Y,R17
00006b 930a      	ST   -Y,R16
                 ;	num -> Y+4
                 ;	n -> Y+2
                 ;	r -> R16,R17
                +
00006c e0e0     +LDI R30 , LOW ( 0x41200000 )
00006d e0f0     +LDI R31 , HIGH ( 0x41200000 )
00006e e260     +LDI R22 , BYTE3 ( 0x41200000 )
00006f e471     +LDI R23 , BYTE4 ( 0x41200000 )
                 	__GETD1N 0x41200000
000070 940e 0524 	CALL __PUTPARD1
000072 81ee      	LDD  R30,Y+6
000073 81ff      	LDD  R31,Y+6+1
000074 940e 02bf 	CALL SUBOPT_0x0
000076 81ac      	LDD  R26,Y+4
000077 81bd      	LDD  R27,Y+4+1
000078 940e 04ea 	CALL __CWD2
00007a 940e 0530 	CALL __CDF2
00007c 940e 0474 	CALL __DIVF21
00007e 940e 0365 	CALL __CFD1
000080 018f      	MOVW R16,R30
                 ; 0000 0022     r = r % 10;
000081 01d8      	MOVW R26,R16
000082 e0ea      	LDI  R30,LOW(10)
000083 e0f0      	LDI  R31,HIGH(10)
000084 940e 0502 	CALL __MODW21
000086 018f      	MOVW R16,R30
                 ; 0000 0023     return r;
000087 8119      	LDD  R17,Y+1
000088 8108      	LDD  R16,Y+0
000089 9626      	ADIW R28,6
00008a 9508      	RET
                 ; 0000 0024 }
                 ; .FEND
                 ;
                 ;// Timer 0 overflow interrupt service routine
                 ;interrupt [TIM0_OVF] void timer0_ovf_isr(void)
                 ; 0000 0028 {
                 _timer0_ovf_isr:
                 ; .FSTART _timer0_ovf_isr
00008b 920a      	ST   -Y,R0
00008c 921a      	ST   -Y,R1
00008d 92fa      	ST   -Y,R15
00008e 936a      	ST   -Y,R22
00008f 937a      	ST   -Y,R23
000090 938a      	ST   -Y,R24
000091 939a      	ST   -Y,R25
000092 93aa      	ST   -Y,R26
000093 93ba      	ST   -Y,R27
000094 93ea      	ST   -Y,R30
000095 93fa      	ST   -Y,R31
000096 b7ef      	IN   R30,SREG
000097 93ea      	ST   -Y,R30
                 ; 0000 0029    ++delay1;
000098 01f4      	MOVW R30,R8
000099 9631      	ADIW R30,1
00009a 014f      	MOVW R8,R30
                 ; 0000 002A 
                 ; 0000 002B    if(delay1 ==2){
00009b e0e2      	LDI  R30,LOW(2)
00009c e0f0      	LDI  R31,HIGH(2)
00009d 15e8      	CP   R30,R8
00009e 05f9      	CPC  R31,R9
00009f f501      	BRNE _0x3
                 ; 0000 002C         PORTB = pow(2, turn-1);
                +
0000a0 e0e0     +LDI R30 , LOW ( 0x40000000 )
0000a1 e0f0     +LDI R31 , HIGH ( 0x40000000 )
0000a2 e060     +LDI R22 , BYTE3 ( 0x40000000 )
0000a3 e470     +LDI R23 , BYTE4 ( 0x40000000 )
                 	__GETD1N 0x40000000
0000a4 940e 0524 	CALL __PUTPARD1
0000a6 01f5      	MOVW R30,R10
0000a7 9731      	SBIW R30,1
0000a8 940e 02bf 	CALL SUBOPT_0x0
0000aa 940e 0363 	CALL __CFD1U
0000ac bbe8      	OUT  0x18,R30
                 ; 0000 002D         PORTC = getdigit(num, turn-1);
0000ad 925a      	ST   -Y,R5
0000ae 924a      	ST   -Y,R4
0000af 01d5      	MOVW R26,R10
0000b0 9711      	SBIW R26,1
0000b1 dfb6      	RCALL _getdigit
0000b2 bbe5      	OUT  0x15,R30
                 ; 0000 002E         turn++;
0000b3 01f5      	MOVW R30,R10
0000b4 9631      	ADIW R30,1
0000b5 015f      	MOVW R10,R30
                 ; 0000 002F         if(turn>4) {
0000b6 e0e4      	LDI  R30,LOW(4)
0000b7 e0f0      	LDI  R31,HIGH(4)
0000b8 15ea      	CP   R30,R10
0000b9 05fb      	CPC  R31,R11
0000ba f41c      	BRGE _0x4
                 ; 0000 0030             turn=1;
0000bb e0e1      	LDI  R30,LOW(1)
0000bc e0f0      	LDI  R31,HIGH(1)
0000bd 015f      	MOVW R10,R30
                 ; 0000 0031         }
                 ; 0000 0032         delay1 =0;
                 _0x4:
0000be 2488      	CLR  R8
0000bf 2499      	CLR  R9
                 ; 0000 0033    }
                 ; 0000 0034 
                 ; 0000 0035     TCNT0=0x00;
                 _0x3:
0000c0 e0e0      	LDI  R30,LOW(0)
0000c1 bfe2      	OUT  0x32,R30
                 ; 0000 0036 }
0000c2 91e9      	LD   R30,Y+
0000c3 bfef      	OUT  SREG,R30
0000c4 91f9      	LD   R31,Y+
0000c5 91e9      	LD   R30,Y+
0000c6 91b9      	LD   R27,Y+
0000c7 91a9      	LD   R26,Y+
0000c8 9199      	LD   R25,Y+
0000c9 9189      	LD   R24,Y+
0000ca 9179      	LD   R23,Y+
0000cb 9169      	LD   R22,Y+
0000cc 90f9      	LD   R15,Y+
0000cd 9019      	LD   R1,Y+
0000ce 9009      	LD   R0,Y+
0000cf 9518      	RETI
                 ; .FEND
                 ;
                 ;
                 ;// Timer1 overflow interrupt service routine
                 ;interrupt [TIM1_OVF] void timer1_ovf_isr(void)
                 ; 0000 003B {
                 _timer1_ovf_isr:
                 ; .FSTART _timer1_ovf_isr
0000d0 93ea      	ST   -Y,R30
0000d1 93fa      	ST   -Y,R31
0000d2 b7ef      	IN   R30,SREG
0000d3 93ea      	ST   -Y,R30
                 ; 0000 003C     ++delay0;
0000d4 01f3      	MOVW R30,R6
0000d5 9631      	ADIW R30,1
0000d6 013f      	MOVW R6,R30
                 ; 0000 003D     if(delay0 == 250){
0000d7 efea      	LDI  R30,LOW(250)
0000d8 e0f0      	LDI  R31,HIGH(250)
0000d9 15e6      	CP   R30,R6
0000da 05f7      	CPC  R31,R7
0000db f461      	BRNE _0x5
                 ; 0000 003E         if(num > 9999){
0000dc e0ef      	LDI  R30,LOW(9999)
0000dd e2f7      	LDI  R31,HIGH(9999)
0000de 15e4      	CP   R30,R4
0000df 05f5      	CPC  R31,R5
0000e0 f414      	BRGE _0x6
                 ; 0000 003F             num = 0;
0000e1 2444      	CLR  R4
0000e2 2455      	CLR  R5
                 ; 0000 0040         }
                 ; 0000 0041         num++;
                 _0x6:
0000e3 01f2      	MOVW R30,R4
0000e4 9631      	ADIW R30,1
0000e5 012f      	MOVW R4,R30
                 ; 0000 0042         delay0 = 0;
0000e6 2466      	CLR  R6
0000e7 2477      	CLR  R7
                 ; 0000 0043     }
                 ; 0000 0044 
                 ; 0000 0045     TCNT1H=0xFF;
                 _0x5:
0000e8 efef      	LDI  R30,LOW(255)
0000e9 bded      	OUT  0x2D,R30
                 ; 0000 0046     TCNT1L=0xF0;
0000ea efe0      	LDI  R30,LOW(240)
0000eb bdec      	OUT  0x2C,R30
                 ; 0000 0047 }
0000ec 91e9      	LD   R30,Y+
0000ed bfef      	OUT  SREG,R30
0000ee 91f9      	LD   R31,Y+
0000ef 91e9      	LD   R30,Y+
0000f0 9518      	RETI
                 ; .FEND
                 ;
                 ;void main(void)
                 ; 0000 004A {
                 _main:
                 ; .FSTART _main
                 ; 0000 004B     TIMSK=(0<<OCIE2) | (0<<TOIE2) | (0<<TICIE1) | (0<<OCIE1A) | (0<<OCIE1B) | (1<<TOIE1) | (0<<OCIE0) | (1<<TOIE0);
0000f1 e0e5      	LDI  R30,LOW(5)
0000f2 bfe9      	OUT  0x39,R30
                 ; 0000 004C     TCCR0=(0<<WGM00) | (0<<COM01) | (0<<COM00) | (0<<WGM01) | (1<<CS02) | (0<<CS01) | (1<<CS00);
0000f3 bfe3      	OUT  0x33,R30
                 ; 0000 004D     TCNT0=0x00;
0000f4 e0e0      	LDI  R30,LOW(0)
0000f5 bfe2      	OUT  0x32,R30
                 ; 0000 004E     OCR0=0x00;
0000f6 bfec      	OUT  0x3C,R30
                 ; 0000 004F     TCCR1A=(0<<COM1A1) | (0<<COM1A0) | (0<<COM1B1) | (0<<COM1B0) | (0<<WGM11) | (0<<WGM10);
0000f7 bdef      	OUT  0x2F,R30
                 ; 0000 0050     TCCR1B=(0<<ICNC1) | (0<<ICES1) | (0<<WGM13) | (0<<WGM12) | (1<<CS12) | (0<<CS11) | (1<<CS10);
0000f8 e0e5      	LDI  R30,LOW(5)
0000f9 bdee      	OUT  0x2E,R30
                 ; 0000 0051     TCNT1H=0xFF;
0000fa efef      	LDI  R30,LOW(255)
0000fb bded      	OUT  0x2D,R30
                 ; 0000 0052     TCNT1L=0xF0;
0000fc efe0      	LDI  R30,LOW(240)
0000fd bdec      	OUT  0x2C,R30
                 ; 0000 0053     MCUCR=(0<<ISC11) | (0<<ISC10) | (0<<ISC01) | (0<<ISC00);
0000fe e0e0      	LDI  R30,LOW(0)
0000ff bfe5      	OUT  0x35,R30
                 ; 0000 0054     MCUCSR=(0<<ISC2);
000100 bfe4      	OUT  0x34,R30
                 ; 0000 0055 
                 ; 0000 0056     #asm("sei")
000101 9478      	sei
                 ; 0000 0057 
                 ; 0000 0058     DDRC=0xff;
000102 efef      	LDI  R30,LOW(255)
000103 bbe4      	OUT  0x14,R30
                 ; 0000 0059     PORTC=0xff;
000104 bbe5      	OUT  0x15,R30
                 ; 0000 005A 
                 ; 0000 005B     DDRB=0xff;
000105 bbe7      	OUT  0x17,R30
                 ; 0000 005C     PORTB=0xff;
000106 bbe8      	OUT  0x18,R30
                 ; 0000 005D 
                 ; 0000 005E     while (1) {
                 _0x7:
                 ; 0000 005F 
                 ; 0000 0060     }
000107 cfff      	RJMP _0x7
                 ; 0000 0061 }
                 _0xA:
000108 cfff      	RJMP _0xA
                 ; .FEND
                 
                 	.CSEG
                 _ftrunc:
                 ; .FSTART _ftrunc
000109 940e 0529 	CALL __PUTPARD2
00010b 817b         ldd  r23,y+3
00010c 816a         ldd  r22,y+2
00010d 81f9         ldd  r31,y+1
00010e 81e8         ld   r30,y
00010f fb77         bst  r23,7
000110 0f77         lsl  r23
000111 fd67         sbrc r22,7
000112 6071         sbr  r23,1
000113 2f97         mov  r25,r23
000114 579e         subi r25,0x7e
000115 f081         breq __ftrunc0
000116 f078         brcs __ftrunc0
000117 3198         cpi  r25,24
000118 f490         brsh __ftrunc1
000119 27aa         clr  r26
00011a 27bb         clr  r27
00011b 2788         clr  r24
                 __ftrunc2:
00011c 9408         sec
00011d 9587         ror  r24
00011e 95b7         ror  r27
00011f 95a7         ror  r26
000120 959a         dec  r25
000121 f7d1         brne __ftrunc2
000122 23ea         and  r30,r26
000123 23fb         and  r31,r27
000124 2368         and  r22,r24
000125 c005         rjmp __ftrunc1
                 __ftrunc0:
000126 94e8         clt
000127 2777         clr  r23
000128 27ee         clr  r30
000129 27ff         clr  r31
00012a 2766         clr  r22
                 __ftrunc1:
00012b 776f         cbr  r22,0x80
00012c 9576         lsr  r23
00012d f408         brcc __ftrunc3
00012e 6860         sbr  r22,0x80
                 __ftrunc3:
00012f f977         bld  r23,7
000130 91a9         ld   r26,y+
000131 91b9         ld   r27,y+
000132 9189         ld   r24,y+
000133 9199         ld   r25,y+
000134 17ea         cp   r30,r26
000135 07fb         cpc  r31,r27
000136 0768         cpc  r22,r24
000137 0779         cpc  r23,r25
000138 fb97         bst  r25,7
000139 9508         ret
                 ; .FEND
                 _floor:
                 ; .FSTART _floor
00013a 940e 0529 	CALL __PUTPARD2
00013c 940e 051a 	CALL __GETD2S0
00013e 940e 0109 	CALL _ftrunc
000140 940e 051f 	CALL __PUTD1S0
000142 f419          brne __floor1
                 __floor0:
000143 940e 02c7 	CALL SUBOPT_0x1
000145 c005      	RJMP _0x2080004
                 __floor1:
000146 f7e6          brtc __floor0
000147 940e 02c7 	CALL SUBOPT_0x1
000149 940e 02ca 	CALL SUBOPT_0x2
                 _0x2080004:
00014b 9624      	ADIW R28,4
00014c 9508      	RET
                 ; .FEND
                 _log:
                 ; .FSTART _log
00014d 940e 0529 	CALL __PUTPARD2
00014f 9724      	SBIW R28,4
000150 931a      	ST   -Y,R17
000151 930a      	ST   -Y,R16
000152 940e 02d1 	CALL SUBOPT_0x3
000154 940e 0544 	CALL __CPD02
000156 f02c      	BRLT _0x200000C
                +
000157 efef     +LDI R30 , LOW ( 0xFF7FFFFF )
000158 efff     +LDI R31 , HIGH ( 0xFF7FFFFF )
000159 e76f     +LDI R22 , BYTE3 ( 0xFF7FFFFF )
00015a ef7f     +LDI R23 , BYTE4 ( 0xFF7FFFFF )
                 	__GETD1N 0xFF7FFFFF
00015b c073      	RJMP _0x2080003
                 _0x200000C:
00015c 940e 02d6 	CALL SUBOPT_0x4
00015e 940e 0524 	CALL __PUTPARD1
000160 b7ad      	IN   R26,SPL
000161 b7be      	IN   R27,SPH
000162 9711      	SBIW R26,1
000163 931f      	PUSH R17
000164 930f      	PUSH R16
000165 940e 0313 	CALL _frexp
000167 910f      	POP  R16
000168 911f      	POP  R17
000169 940e 02db 	CALL SUBOPT_0x5
00016b 940e 02d1 	CALL SUBOPT_0x3
                +
00016d efe3     +LDI R30 , LOW ( 0x3F3504F3 )
00016e e0f4     +LDI R31 , HIGH ( 0x3F3504F3 )
00016f e365     +LDI R22 , BYTE3 ( 0x3F3504F3 )
000170 e37f     +LDI R23 , BYTE4 ( 0x3F3504F3 )
                 	__GETD1N 0x3F3504F3
000171 940e 04b9 	CALL __CMPF12
000173 f440      	BRSH _0x200000D
000174 940e 02e0 	CALL SUBOPT_0x6
000176 940e 03d6 	CALL __ADDF12
000178 940e 02db 	CALL SUBOPT_0x5
                +
00017a 5001     +SUBI R16 , LOW ( 1 )
00017b 4010     +SBCI R17 , HIGH ( 1 )
                 	__SUBWRN 16,17,1
                 _0x200000D:
00017c 940e 02d6 	CALL SUBOPT_0x4
00017e 940e 02ca 	CALL SUBOPT_0x2
000180 937f      	PUSH R23
000181 936f      	PUSH R22
000182 93ff      	PUSH R31
000183 93ef      	PUSH R30
000184 940e 02d6 	CALL SUBOPT_0x4
                +
000186 e0a0     +LDI R26 , LOW ( 0x3F800000 )
000187 e0b0     +LDI R27 , HIGH ( 0x3F800000 )
000188 e880     +LDI R24 , BYTE3 ( 0x3F800000 )
000189 e39f     +LDI R25 , BYTE4 ( 0x3F800000 )
                 	__GETD2N 0x3F800000
00018a 940e 03d6 	CALL __ADDF12
00018c 91af      	POP  R26
00018d 91bf      	POP  R27
00018e 918f      	POP  R24
00018f 919f      	POP  R25
000190 940e 0474 	CALL __DIVF21
000192 940e 02db 	CALL SUBOPT_0x5
000194 940e 02e0 	CALL SUBOPT_0x6
000196 940e 02e2 	CALL SUBOPT_0x7
                +
000198 e2a6     +LDI R26 , LOW ( 0x3F654226 )
000199 e4b2     +LDI R27 , HIGH ( 0x3F654226 )
00019a e685     +LDI R24 , BYTE3 ( 0x3F654226 )
00019b e39f     +LDI R25 , BYTE4 ( 0x3F654226 )
                 	__GETD2N 0x3F654226
00019c 940e 02e9 	CALL SUBOPT_0x8
                +
00019e e4ee     +LDI R30 , LOW ( 0x4054114E )
00019f e1f1     +LDI R31 , HIGH ( 0x4054114E )
0001a0 e564     +LDI R22 , BYTE3 ( 0x4054114E )
0001a1 e470     +LDI R23 , BYTE4 ( 0x4054114E )
                 	__GETD1N 0x4054114E
0001a2 940e 02ee 	CALL SUBOPT_0x9
0001a4 940e 02d1 	CALL SUBOPT_0x3
0001a6 940e 0426 	CALL __MULF12
0001a8 937f      	PUSH R23
0001a9 936f      	PUSH R22
0001aa 93ff      	PUSH R31
0001ab 93ef      	PUSH R30
0001ac 940e 02f3 	CALL SUBOPT_0xA
                +
0001ae e4ad     +LDI R26 , LOW ( 0x3FD4114D )
0001af e1b1     +LDI R27 , HIGH ( 0x3FD4114D )
0001b0 ed84     +LDI R24 , BYTE3 ( 0x3FD4114D )
0001b1 e39f     +LDI R25 , BYTE4 ( 0x3FD4114D )
                 	__GETD2N 0x3FD4114D
0001b2 940e 03cf 	CALL __SUBF12
0001b4 91af      	POP  R26
0001b5 91bf      	POP  R27
0001b6 918f      	POP  R24
0001b7 919f      	POP  R25
0001b8 940e 0474 	CALL __DIVF21
0001ba 937f      	PUSH R23
0001bb 936f      	PUSH R22
0001bc 93ff      	PUSH R31
0001bd 93ef      	PUSH R30
0001be 01f8      	MOVW R30,R16
0001bf 940e 04e5 	CALL __CWD1
0001c1 940e 039c 	CALL __CDF1
                +
0001c3 e1a8     +LDI R26 , LOW ( 0x3F317218 )
0001c4 e7b2     +LDI R27 , HIGH ( 0x3F317218 )
0001c5 e381     +LDI R24 , BYTE3 ( 0x3F317218 )
0001c6 e39f     +LDI R25 , BYTE4 ( 0x3F317218 )
                 	__GETD2N 0x3F317218
0001c7 940e 0426 	CALL __MULF12
0001c9 91af      	POP  R26
0001ca 91bf      	POP  R27
0001cb 918f      	POP  R24
0001cc 919f      	POP  R25
0001cd 940e 03d6 	CALL __ADDF12
                 _0x2080003:
0001cf 8119      	LDD  R17,Y+1
0001d0 8108      	LDD  R16,Y+0
0001d1 962a      	ADIW R28,10
0001d2 9508      	RET
                 ; .FEND
                 _exp:
                 ; .FSTART _exp
0001d3 940e 0529 	CALL __PUTPARD2
0001d5 9728      	SBIW R28,8
0001d6 931a      	ST   -Y,R17
0001d7 930a      	ST   -Y,R16
0001d8 940e 02f8 	CALL SUBOPT_0xB
                +
0001da e5e0     +LDI R30 , LOW ( 0xC2AEAC50 )
0001db eafc     +LDI R31 , HIGH ( 0xC2AEAC50 )
0001dc ea6e     +LDI R22 , BYTE3 ( 0xC2AEAC50 )
0001dd ec72     +LDI R23 , BYTE4 ( 0xC2AEAC50 )
                 	__GETD1N 0xC2AEAC50
0001de 940e 04b9 	CALL __CMPF12
0001e0 f418      	BRSH _0x200000F
0001e1 940e 02fd 	CALL SUBOPT_0xC
0001e3 c085      	RJMP _0x2080002
                 _0x200000F:
                +
0001e4 85ea     +LDD R30 , Y + 10
0001e5 85fb     +LDD R31 , Y + 10 + 1
0001e6 856c     +LDD R22 , Y + 10 + 2
0001e7 857d     +LDD R23 , Y + 10 + 3
                 	__GETD1S 10
0001e8 940e 0540 	CALL __CPD10
0001ea f429      	BRNE _0x2000010
                +
0001eb e0e0     +LDI R30 , LOW ( 0x3F800000 )
0001ec e0f0     +LDI R31 , HIGH ( 0x3F800000 )
0001ed e860     +LDI R22 , BYTE3 ( 0x3F800000 )
0001ee e37f     +LDI R23 , BYTE4 ( 0x3F800000 )
                 	__GETD1N 0x3F800000
0001ef c079      	RJMP _0x2080002
                 _0x2000010:
0001f0 940e 02f8 	CALL SUBOPT_0xB
                +
0001f2 e1e8     +LDI R30 , LOW ( 0x42B17218 )
0001f3 e7f2     +LDI R31 , HIGH ( 0x42B17218 )
0001f4 eb61     +LDI R22 , BYTE3 ( 0x42B17218 )
0001f5 e472     +LDI R23 , BYTE4 ( 0x42B17218 )
                 	__GETD1N 0x42B17218
0001f6 940e 04b9 	CALL __CMPF12
0001f8 f009      	BREQ PC+2
0001f9 f408      	BRCC PC+2
0001fa c005      	RJMP _0x2000011
                +
0001fb efef     +LDI R30 , LOW ( 0x7F7FFFFF )
0001fc efff     +LDI R31 , HIGH ( 0x7F7FFFFF )
0001fd e76f     +LDI R22 , BYTE3 ( 0x7F7FFFFF )
0001fe e77f     +LDI R23 , BYTE4 ( 0x7F7FFFFF )
                 	__GETD1N 0x7F7FFFFF
0001ff c069      	RJMP _0x2080002
                 _0x2000011:
000200 940e 02f8 	CALL SUBOPT_0xB
                +
000202 e3eb     +LDI R30 , LOW ( 0x3FB8AA3B )
000203 eafa     +LDI R31 , HIGH ( 0x3FB8AA3B )
000204 eb68     +LDI R22 , BYTE3 ( 0x3FB8AA3B )
000205 e37f     +LDI R23 , BYTE4 ( 0x3FB8AA3B )
                 	__GETD1N 0x3FB8AA3B
000206 940e 0426 	CALL __MULF12
                +
000208 87ea     +STD Y + 10 , R30
000209 87fb     +STD Y + 10 + 1 , R31
00020a 876c     +STD Y + 10 + 2 , R22
00020b 877d     +STD Y + 10 + 3 , R23
                 	__PUTD1S 10
00020c 940e 02f8 	CALL SUBOPT_0xB
00020e df2b      	RCALL _floor
00020f 940e 0365 	CALL __CFD1
000211 018f      	MOVW R16,R30
000212 940e 02f8 	CALL SUBOPT_0xB
000214 940e 04e5 	CALL __CWD1
000216 940e 039c 	CALL __CDF1
000218 940e 02ee 	CALL SUBOPT_0x9
00021a 01df      	MOVW R26,R30
00021b 01cb      	MOVW R24,R22
                +
00021c e0e0     +LDI R30 , LOW ( 0x3F000000 )
00021d e0f0     +LDI R31 , HIGH ( 0x3F000000 )
00021e e060     +LDI R22 , BYTE3 ( 0x3F000000 )
00021f e37f     +LDI R23 , BYTE4 ( 0x3F000000 )
                 	__GETD1N 0x3F000000
000220 940e 02ee 	CALL SUBOPT_0x9
000222 940e 02db 	CALL SUBOPT_0x5
000224 940e 02e0 	CALL SUBOPT_0x6
000226 940e 02e2 	CALL SUBOPT_0x7
                +
000228 e6ad     +LDI R26 , LOW ( 0x3D6C4C6D )
000229 e4bc     +LDI R27 , HIGH ( 0x3D6C4C6D )
00022a e68c     +LDI R24 , BYTE3 ( 0x3D6C4C6D )
00022b e39d     +LDI R25 , BYTE4 ( 0x3D6C4C6D )
                 	__GETD2N 0x3D6C4C6D
00022c 940e 0426 	CALL __MULF12
                +
00022e eaa6     +LDI R26 , LOW ( 0x40E6E3A6 )
00022f eeb3     +LDI R27 , HIGH ( 0x40E6E3A6 )
000230 ee86     +LDI R24 , BYTE3 ( 0x40E6E3A6 )
000231 e490     +LDI R25 , BYTE4 ( 0x40E6E3A6 )
                 	__GETD2N 0x40E6E3A6
000232 940e 03d6 	CALL __ADDF12
000234 940e 02d1 	CALL SUBOPT_0x3
000236 940e 0426 	CALL __MULF12
000238 940e 02db 	CALL SUBOPT_0x5
00023a 940e 02f3 	CALL SUBOPT_0xA
                +
00023c e2a8     +LDI R26 , LOW ( 0x41A68D28 )
00023d e8bd     +LDI R27 , HIGH ( 0x41A68D28 )
00023e ea86     +LDI R24 , BYTE3 ( 0x41A68D28 )
00023f e491     +LDI R25 , BYTE4 ( 0x41A68D28 )
                 	__GETD2N 0x41A68D28
000240 940e 03d6 	CALL __ADDF12
                +
000242 83ea     +STD Y + 2 , R30
000243 83fb     +STD Y + 2 + 1 , R31
000244 836c     +STD Y + 2 + 2 , R22
000245 837d     +STD Y + 2 + 3 , R23
                 	__PUTD1S 2
000246 940e 02d6 	CALL SUBOPT_0x4
                +
000248 81aa     +LDD R26 , Y + 2
000249 81bb     +LDD R27 , Y + 2 + 1
00024a 818c     +LDD R24 , Y + 2 + 2
00024b 819d     +LDD R25 , Y + 2 + 3
                 	__GETD2S 2
00024c 940e 03d6 	CALL __ADDF12
                +
00024e efa3     +LDI R26 , LOW ( 0x3FB504F3 )
00024f e0b4     +LDI R27 , HIGH ( 0x3FB504F3 )
000250 eb85     +LDI R24 , BYTE3 ( 0x3FB504F3 )
000251 e39f     +LDI R25 , BYTE4 ( 0x3FB504F3 )
                 	__GETD2N 0x3FB504F3
000252 940e 0426 	CALL __MULF12
000254 937f      	PUSH R23
000255 936f      	PUSH R22
000256 93ff      	PUSH R31
000257 93ef      	PUSH R30
000258 940e 02d1 	CALL SUBOPT_0x3
00025a 940e 02f3 	CALL SUBOPT_0xA
00025c 940e 03cf 	CALL __SUBF12
00025e 91af      	POP  R26
00025f 91bf      	POP  R27
000260 918f      	POP  R24
000261 919f      	POP  R25
000262 940e 0474 	CALL __DIVF21
000264 940e 0524 	CALL __PUTPARD1
000266 01d8      	MOVW R26,R16
000267 940e 0324 	CALL _ldexp
                 _0x2080002:
000269 8119      	LDD  R17,Y+1
00026a 8108      	LDD  R16,Y+0
00026b 962e      	ADIW R28,14
00026c 9508      	RET
                 ; .FEND
                 _pow:
                 ; .FSTART _pow
00026d 940e 0529 	CALL __PUTPARD2
00026f 9724      	SBIW R28,4
000270 940e 0302 	CALL SUBOPT_0xD
000272 940e 0540 	CALL __CPD10
000274 f419      	BRNE _0x2000012
000275 940e 02fd 	CALL SUBOPT_0xC
000277 c045      	RJMP _0x2080001
                 _0x2000012:
                +
000278 85a8     +LDD R26 , Y + 8
000279 85b9     +LDD R27 , Y + 8 + 1
00027a 858a     +LDD R24 , Y + 8 + 2
00027b 859b     +LDD R25 , Y + 8 + 3
                 	__GETD2S 8
00027c 940e 0544 	CALL __CPD02
00027e f494      	BRGE _0x2000013
00027f 940e 0307 	CALL SUBOPT_0xE
000281 940e 0540 	CALL __CPD10
000283 f429      	BRNE _0x2000014
                +
000284 e0e0     +LDI R30 , LOW ( 0x3F800000 )
000285 e0f0     +LDI R31 , HIGH ( 0x3F800000 )
000286 e860     +LDI R22 , BYTE3 ( 0x3F800000 )
000287 e37f     +LDI R23 , BYTE4 ( 0x3F800000 )
                 	__GETD1N 0x3F800000
000288 c034      	RJMP _0x2080001
                 _0x2000014:
                +
000289 85a8     +LDD R26 , Y + 8
00028a 85b9     +LDD R27 , Y + 8 + 1
00028b 858a     +LDD R24 , Y + 8 + 2
00028c 859b     +LDD R25 , Y + 8 + 3
                 	__GETD2S 8
00028d 940e 030c 	CALL SUBOPT_0xF
00028f df43      	RCALL _exp
000290 c02c      	RJMP _0x2080001
                 _0x2000013:
000291 940e 0307 	CALL SUBOPT_0xE
000293 01de      	MOVW R26,R28
000294 940e 0365 	CALL __CFD1
000296 940e 0510 	CALL __PUTDP1
000298 940e 02c7 	CALL SUBOPT_0x1
00029a 940e 039c 	CALL __CDF1
00029c 01df      	MOVW R26,R30
00029d 01cb      	MOVW R24,R22
00029e 940e 0307 	CALL SUBOPT_0xE
0002a0 940e 054a 	CALL __CPD12
0002a2 f019      	BREQ _0x2000015
0002a3 940e 02fd 	CALL SUBOPT_0xC
0002a5 c017      	RJMP _0x2080001
                 _0x2000015:
0002a6 940e 0302 	CALL SUBOPT_0xD
0002a8 940e 0330 	CALL __ANEGF1
0002aa 01df      	MOVW R26,R30
0002ab 01cb      	MOVW R24,R22
0002ac 940e 030c 	CALL SUBOPT_0xF
0002ae df24      	RCALL _exp
                +
0002af 87e8     +STD Y + 8 , R30
0002b0 87f9     +STD Y + 8 + 1 , R31
0002b1 876a     +STD Y + 8 + 2 , R22
0002b2 877b     +STD Y + 8 + 3 , R23
                 	__PUTD1S 8
0002b3 81e8      	LD   R30,Y
0002b4 70e1      	ANDI R30,LOW(0x1)
0002b5 f419      	BRNE _0x2000016
0002b6 940e 0302 	CALL SUBOPT_0xD
0002b8 c004      	RJMP _0x2080001
                 _0x2000016:
0002b9 940e 0302 	CALL SUBOPT_0xD
0002bb 940e 0330 	CALL __ANEGF1
                 _0x2080001:
0002bd 962c      	ADIW R28,12
0002be 9508      	RET
                 ; .FEND
                 
                 	.CSEG
                 
                 	.DSEG
                 
                 	.CSEG
                 
                 	.CSEG
                 
                 	.CSEG
                 
                 	.DSEG
                 __seed_G101:
000160           	.BYTE 0x4
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x0:
0002bf 940e 04e5 	CALL __CWD1
0002c1 940e 039c 	CALL __CDF1
0002c3 01df      	MOVW R26,R30
0002c4 01cb      	MOVW R24,R22
0002c5 940c 026d 	JMP  _pow
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x1:
0002c7 940e 0515 	CALL __GETD1S0
0002c9 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x2:
                +
0002ca e0a0     +LDI R26 , LOW ( 0x3F800000 )
0002cb e0b0     +LDI R27 , HIGH ( 0x3F800000 )
0002cc e880     +LDI R24 , BYTE3 ( 0x3F800000 )
0002cd e39f     +LDI R25 , BYTE4 ( 0x3F800000 )
                 	__GETD2N 0x3F800000
0002ce 940e 03cf 	CALL __SUBF12
0002d0 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 8 TIMES, CODE SIZE REDUCTION:11 WORDS
                 SUBOPT_0x3:
                +
0002d1 81ae     +LDD R26 , Y + 6
0002d2 81bf     +LDD R27 , Y + 6 + 1
0002d3 8588     +LDD R24 , Y + 6 + 2
0002d4 8599     +LDD R25 , Y + 6 + 3
                 	__GETD2S 6
0002d5 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 7 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x4:
                +
0002d6 81ee     +LDD R30 , Y + 6
0002d7 81ff     +LDD R31 , Y + 6 + 1
0002d8 8568     +LDD R22 , Y + 6 + 2
0002d9 8579     +LDD R23 , Y + 6 + 3
                 	__GETD1S 6
0002da 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x5:
                +
0002db 83ee     +STD Y + 6 , R30
0002dc 83ff     +STD Y + 6 + 1 , R31
0002dd 8768     +STD Y + 6 + 2 , R22
0002de 8779     +STD Y + 6 + 3 , R23
                 	__PUTD1S 6
0002df 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x6:
0002e0 dff5      	RCALL SUBOPT_0x4
0002e1 cfef      	RJMP SUBOPT_0x3
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x7:
0002e2 940e 0426 	CALL __MULF12
                +
0002e4 83ea     +STD Y + 2 , R30
0002e5 83fb     +STD Y + 2 + 1 , R31
0002e6 836c     +STD Y + 2 + 2 , R22
0002e7 837d     +STD Y + 2 + 3 , R23
                 	__PUTD1S 2
0002e8 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x8:
0002e9 940e 0426 	CALL __MULF12
0002eb 01df      	MOVW R26,R30
0002ec 01cb      	MOVW R24,R22
0002ed 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x9:
0002ee 940e 0533 	CALL __SWAPD12
0002f0 940e 03cf 	CALL __SUBF12
0002f2 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0xA:
                +
0002f3 81ea     +LDD R30 , Y + 2
0002f4 81fb     +LDD R31 , Y + 2 + 1
0002f5 816c     +LDD R22 , Y + 2 + 2
0002f6 817d     +LDD R23 , Y + 2 + 3
                 	__GETD1S 2
0002f7 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0xB:
                +
0002f8 85aa     +LDD R26 , Y + 10
0002f9 85bb     +LDD R27 , Y + 10 + 1
0002fa 858c     +LDD R24 , Y + 10 + 2
0002fb 859d     +LDD R25 , Y + 10 + 3
                 	__GETD2S 10
0002fc 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0xC:
                +
0002fd e0e0     +LDI R30 , LOW ( 0x0 )
0002fe e0f0     +LDI R31 , HIGH ( 0x0 )
0002ff e060     +LDI R22 , BYTE3 ( 0x0 )
000300 e070     +LDI R23 , BYTE4 ( 0x0 )
                 	__GETD1N 0x0
000301 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0xD:
                +
000302 85e8     +LDD R30 , Y + 8
000303 85f9     +LDD R31 , Y + 8 + 1
000304 856a     +LDD R22 , Y + 8 + 2
000305 857b     +LDD R23 , Y + 8 + 3
                 	__GETD1S 8
000306 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0xE:
                +
000307 81ec     +LDD R30 , Y + 4
000308 81fd     +LDD R31 , Y + 4 + 1
000309 816e     +LDD R22 , Y + 4 + 2
00030a 817f     +LDD R23 , Y + 4 + 3
                 	__GETD1S 4
00030b 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0xF:
00030c 940e 014d 	CALL _log
                +
00030e 81ac     +LDD R26 , Y + 4
00030f 81bd     +LDD R27 , Y + 4 + 1
000310 818e     +LDD R24 , Y + 4 + 2
000311 819f     +LDD R25 , Y + 4 + 3
                 	__GETD2S 4
000312 cfd6      	RJMP SUBOPT_0x8
                 
                 
                 	.CSEG
                 _frexp:
000313 91e9      	LD   R30,Y+
000314 91f9      	LD   R31,Y+
000315 9169      	LD   R22,Y+
000316 9179      	LD   R23,Y+
000317 fb77      	BST  R23,7
000318 0f66      	LSL  R22
000319 1f77      	ROL  R23
00031a 2788      	CLR  R24
00031b 577e      	SUBI R23,0x7E
00031c 0b88      	SBC  R24,R24
00031d 937d      	ST   X+,R23
00031e 938c      	ST   X,R24
00031f e77e      	LDI  R23,0x7E
000320 9576      	LSR  R23
000321 9567      	ROR  R22
000322 f06e      	BRTS __ANEGF1
000323 9508      	RET
                 
                 _ldexp:
000324 91e9      	LD   R30,Y+
000325 91f9      	LD   R31,Y+
000326 9169      	LD   R22,Y+
000327 9179      	LD   R23,Y+
000328 fb77      	BST  R23,7
000329 0f66      	LSL  R22
00032a 1f77      	ROL  R23
00032b 0f7a      	ADD  R23,R26
00032c 9576      	LSR  R23
00032d 9567      	ROR  R22
00032e f00e      	BRTS __ANEGF1
00032f 9508      	RET
                 
                 __ANEGF1:
000330 9730      	SBIW R30,0
000331 4060      	SBCI R22,0
000332 4070      	SBCI R23,0
000333 f009      	BREQ __ANEGF10
000334 5870      	SUBI R23,0x80
                 __ANEGF10:
000335 9508      	RET
                 
                 __ROUND_REPACK:
000336 2355      	TST  R21
000337 f442      	BRPL __REPACK
000338 3850      	CPI  R21,0x80
000339 f411      	BRNE __ROUND_REPACK0
00033a ffe0      	SBRS R30,0
00033b c004      	RJMP __REPACK
                 __ROUND_REPACK0:
00033c 9631      	ADIW R30,1
00033d 1f69      	ADC  R22,R25
00033e 1f79      	ADC  R23,R25
00033f f06b      	BRVS __REPACK1
                 
                 __REPACK:
000340 e850      	LDI  R21,0x80
000341 2757      	EOR  R21,R23
000342 f411      	BRNE __REPACK0
000343 935f      	PUSH R21
000344 c0cf      	RJMP __ZERORES
                 __REPACK0:
000345 3f5f      	CPI  R21,0xFF
000346 f031      	BREQ __REPACK1
000347 0f66      	LSL  R22
000348 0c00      	LSL  R0
000349 9557      	ROR  R21
00034a 9567      	ROR  R22
00034b 2f75      	MOV  R23,R21
00034c 9508      	RET
                 __REPACK1:
00034d 935f      	PUSH R21
00034e 2000      	TST  R0
00034f f00a      	BRMI __REPACK2
000350 c0cf      	RJMP __MAXRES
                 __REPACK2:
000351 c0c8      	RJMP __MINRES
                 
                 __UNPACK:
000352 e850      	LDI  R21,0x80
000353 2e19      	MOV  R1,R25
000354 2215      	AND  R1,R21
000355 0f88      	LSL  R24
000356 1f99      	ROL  R25
000357 2795      	EOR  R25,R21
000358 0f55      	LSL  R21
000359 9587      	ROR  R24
                 
                 __UNPACK1:
00035a e850      	LDI  R21,0x80
00035b 2e07      	MOV  R0,R23
00035c 2205      	AND  R0,R21
00035d 0f66      	LSL  R22
00035e 1f77      	ROL  R23
00035f 2775      	EOR  R23,R21
000360 0f55      	LSL  R21
000361 9567      	ROR  R22
000362 9508      	RET
                 
                 __CFD1U:
000363 9468      	SET
000364 c001      	RJMP __CFD1U0
                 __CFD1:
000365 94e8      	CLT
                 __CFD1U0:
000366 935f      	PUSH R21
000367 dff2      	RCALL __UNPACK1
000368 3870      	CPI  R23,0x80
000369 f018      	BRLO __CFD10
00036a 3f7f      	CPI  R23,0xFF
00036b f408      	BRCC __CFD10
00036c c0a7      	RJMP __ZERORES
                 __CFD10:
00036d e156      	LDI  R21,22
00036e 1b57      	SUB  R21,R23
00036f f4aa      	BRPL __CFD11
000370 9551      	NEG  R21
000371 3058      	CPI  R21,8
000372 f40e      	BRTC __CFD19
000373 3059      	CPI  R21,9
                 __CFD19:
000374 f030      	BRLO __CFD17
000375 efef      	SER  R30
000376 efff      	SER  R31
000377 ef6f      	SER  R22
000378 e77f      	LDI  R23,0x7F
000379 f977      	BLD  R23,7
00037a c01a      	RJMP __CFD15
                 __CFD17:
00037b 2777      	CLR  R23
00037c 2355      	TST  R21
00037d f0b9      	BREQ __CFD15
                 __CFD18:
00037e 0fee      	LSL  R30
00037f 1fff      	ROL  R31
000380 1f66      	ROL  R22
000381 1f77      	ROL  R23
000382 955a      	DEC  R21
000383 f7d1      	BRNE __CFD18
000384 c010      	RJMP __CFD15
                 __CFD11:
000385 2777      	CLR  R23
                 __CFD12:
000386 3058      	CPI  R21,8
000387 f028      	BRLO __CFD13
000388 2fef      	MOV  R30,R31
000389 2ff6      	MOV  R31,R22
00038a 2f67      	MOV  R22,R23
00038b 5058      	SUBI R21,8
00038c cff9      	RJMP __CFD12
                 __CFD13:
00038d 2355      	TST  R21
00038e f031      	BREQ __CFD15
                 __CFD14:
00038f 9576      	LSR  R23
000390 9567      	ROR  R22
000391 95f7      	ROR  R31
000392 95e7      	ROR  R30
000393 955a      	DEC  R21
000394 f7d1      	BRNE __CFD14
                 __CFD15:
000395 2000      	TST  R0
000396 f40a      	BRPL __CFD16
000397 d145      	RCALL __ANEGD1
                 __CFD16:
000398 915f      	POP  R21
000399 9508      	RET
                 
                 __CDF1U:
00039a 9468      	SET
00039b c001      	RJMP __CDF1U0
                 __CDF1:
00039c 94e8      	CLT
                 __CDF1U0:
00039d 9730      	SBIW R30,0
00039e 4060      	SBCI R22,0
00039f 4070      	SBCI R23,0
0003a0 f0b1      	BREQ __CDF10
0003a1 2400      	CLR  R0
0003a2 f026      	BRTS __CDF11
0003a3 2377      	TST  R23
0003a4 f412      	BRPL __CDF11
0003a5 9400      	COM  R0
0003a6 d136      	RCALL __ANEGD1
                 __CDF11:
0003a7 2e17      	MOV  R1,R23
0003a8 e17e      	LDI  R23,30
0003a9 2011      	TST  R1
                 __CDF12:
0003aa f032      	BRMI __CDF13
0003ab 957a      	DEC  R23
0003ac 0fee      	LSL  R30
0003ad 1fff      	ROL  R31
0003ae 1f66      	ROL  R22
0003af 1c11      	ROL  R1
0003b0 cff9      	RJMP __CDF12
                 __CDF13:
0003b1 2fef      	MOV  R30,R31
0003b2 2ff6      	MOV  R31,R22
0003b3 2d61      	MOV  R22,R1
0003b4 935f      	PUSH R21
0003b5 df8a      	RCALL __REPACK
0003b6 915f      	POP  R21
                 __CDF10:
0003b7 9508      	RET
                 
                 __SWAPACC:
0003b8 934f      	PUSH R20
0003b9 01af      	MOVW R20,R30
0003ba 01fd      	MOVW R30,R26
0003bb 01da      	MOVW R26,R20
0003bc 01ab      	MOVW R20,R22
0003bd 01bc      	MOVW R22,R24
0003be 01ca      	MOVW R24,R20
0003bf 2d40      	MOV  R20,R0
0003c0 2c01      	MOV  R0,R1
0003c1 2e14      	MOV  R1,R20
0003c2 914f      	POP  R20
0003c3 9508      	RET
                 
                 __UADD12:
0003c4 0fea      	ADD  R30,R26
0003c5 1ffb      	ADC  R31,R27
0003c6 1f68      	ADC  R22,R24
0003c7 9508      	RET
                 
                 __NEGMAN1:
0003c8 95e0      	COM  R30
0003c9 95f0      	COM  R31
0003ca 9560      	COM  R22
0003cb 5fef      	SUBI R30,-1
0003cc 4fff      	SBCI R31,-1
0003cd 4f6f      	SBCI R22,-1
0003ce 9508      	RET
                 
                 __SUBF12:
0003cf 935f      	PUSH R21
0003d0 df81      	RCALL __UNPACK
0003d1 3890      	CPI  R25,0x80
0003d2 f171      	BREQ __ADDF129
0003d3 e850      	LDI  R21,0x80
0003d4 2615      	EOR  R1,R21
                 
0003d5 c004      	RJMP __ADDF120
                 
                 __ADDF12:
0003d6 935f      	PUSH R21
0003d7 df7a      	RCALL __UNPACK
0003d8 3890      	CPI  R25,0x80
0003d9 f139      	BREQ __ADDF129
                 
                 __ADDF120:
0003da 3870      	CPI  R23,0x80
0003db f121      	BREQ __ADDF128
                 __ADDF121:
0003dc 2f57      	MOV  R21,R23
0003dd 1b59      	SUB  R21,R25
0003de f12b      	BRVS __ADDF1211
0003df f412      	BRPL __ADDF122
0003e0 dfd7      	RCALL __SWAPACC
0003e1 cffa      	RJMP __ADDF121
                 __ADDF122:
0003e2 3158      	CPI  R21,24
0003e3 f018      	BRLO __ADDF123
0003e4 27aa      	CLR  R26
0003e5 27bb      	CLR  R27
0003e6 2788      	CLR  R24
                 __ADDF123:
0003e7 3058      	CPI  R21,8
0003e8 f028      	BRLO __ADDF124
0003e9 2fab      	MOV  R26,R27
0003ea 2fb8      	MOV  R27,R24
0003eb 2788      	CLR  R24
0003ec 5058      	SUBI R21,8
0003ed cff9      	RJMP __ADDF123
                 __ADDF124:
0003ee 2355      	TST  R21
0003ef f029      	BREQ __ADDF126
                 __ADDF125:
0003f0 9586      	LSR  R24
0003f1 95b7      	ROR  R27
0003f2 95a7      	ROR  R26
0003f3 955a      	DEC  R21
0003f4 f7d9      	BRNE __ADDF125
                 __ADDF126:
0003f5 2d50      	MOV  R21,R0
0003f6 2551      	EOR  R21,R1
0003f7 f072      	BRMI __ADDF127
0003f8 dfcb      	RCALL __UADD12
0003f9 f438      	BRCC __ADDF129
0003fa 9567      	ROR  R22
0003fb 95f7      	ROR  R31
0003fc 95e7      	ROR  R30
0003fd 9573      	INC  R23
0003fe f413      	BRVC __ADDF129
0003ff c020      	RJMP __MAXRES
                 __ADDF128:
000400 dfb7      	RCALL __SWAPACC
                 __ADDF129:
000401 df3e      	RCALL __REPACK
000402 915f      	POP  R21
000403 9508      	RET
                 __ADDF1211:
000404 f7d8      	BRCC __ADDF128
000405 cffb      	RJMP __ADDF129
                 __ADDF127:
000406 1bea      	SUB  R30,R26
000407 0bfb      	SBC  R31,R27
000408 0b68      	SBC  R22,R24
000409 f051      	BREQ __ZERORES
00040a f410      	BRCC __ADDF1210
00040b 9400      	COM  R0
00040c dfbb      	RCALL __NEGMAN1
                 __ADDF1210:
00040d 2366      	TST  R22
00040e f392      	BRMI __ADDF129
00040f 0fee      	LSL  R30
000410 1fff      	ROL  R31
000411 1f66      	ROL  R22
000412 957a      	DEC  R23
000413 f7cb      	BRVC __ADDF1210
                 
                 __ZERORES:
000414 27ee      	CLR  R30
000415 27ff      	CLR  R31
000416 2766      	CLR  R22
000417 2777      	CLR  R23
000418 915f      	POP  R21
000419 9508      	RET
                 
                 __MINRES:
00041a efef      	SER  R30
00041b efff      	SER  R31
00041c e76f      	LDI  R22,0x7F
00041d ef7f      	SER  R23
00041e 915f      	POP  R21
00041f 9508      	RET
                 
                 __MAXRES:
000420 efef      	SER  R30
000421 efff      	SER  R31
000422 e76f      	LDI  R22,0x7F
000423 e77f      	LDI  R23,0x7F
000424 915f      	POP  R21
000425 9508      	RET
                 
                 __MULF12:
000426 935f      	PUSH R21
000427 df2a      	RCALL __UNPACK
000428 3870      	CPI  R23,0x80
000429 f351      	BREQ __ZERORES
00042a 3890      	CPI  R25,0x80
00042b f341      	BREQ __ZERORES
00042c 2401      	EOR  R0,R1
00042d 9408      	SEC
00042e 1f79      	ADC  R23,R25
00042f f423      	BRVC __MULF124
000430 f31c      	BRLT __ZERORES
                 __MULF125:
000431 2000      	TST  R0
000432 f33a      	BRMI __MINRES
000433 cfec      	RJMP __MAXRES
                 __MULF124:
000434 920f      	PUSH R0
000435 931f      	PUSH R17
000436 932f      	PUSH R18
000437 933f      	PUSH R19
000438 934f      	PUSH R20
000439 2711      	CLR  R17
00043a 2722      	CLR  R18
00043b 2799      	CLR  R25
00043c 9f68      	MUL  R22,R24
00043d 01a0      	MOVW R20,R0
00043e 9f8f      	MUL  R24,R31
00043f 2d30      	MOV  R19,R0
000440 0d41      	ADD  R20,R1
000441 1f59      	ADC  R21,R25
000442 9f6b      	MUL  R22,R27
000443 0d30      	ADD  R19,R0
000444 1d41      	ADC  R20,R1
000445 1f59      	ADC  R21,R25
000446 9f8e      	MUL  R24,R30
000447 d027      	RCALL __MULF126
000448 9fbf      	MUL  R27,R31
000449 d025      	RCALL __MULF126
00044a 9f6a      	MUL  R22,R26
00044b d023      	RCALL __MULF126
00044c 9fbe      	MUL  R27,R30
00044d d01d      	RCALL __MULF127
00044e 9faf      	MUL  R26,R31
00044f d01b      	RCALL __MULF127
000450 9fae      	MUL  R26,R30
000451 0d11      	ADD  R17,R1
000452 1f29      	ADC  R18,R25
000453 1f39      	ADC  R19,R25
000454 1f49      	ADC  R20,R25
000455 1f59      	ADC  R21,R25
000456 2fe3      	MOV  R30,R19
000457 2ff4      	MOV  R31,R20
000458 2f65      	MOV  R22,R21
000459 2f52      	MOV  R21,R18
00045a 914f      	POP  R20
00045b 913f      	POP  R19
00045c 912f      	POP  R18
00045d 911f      	POP  R17
00045e 900f      	POP  R0
00045f 2366      	TST  R22
000460 f02a      	BRMI __MULF122
000461 0f55      	LSL  R21
000462 1fee      	ROL  R30
000463 1fff      	ROL  R31
000464 1f66      	ROL  R22
000465 c002      	RJMP __MULF123
                 __MULF122:
000466 9573      	INC  R23
000467 f24b      	BRVS __MULF125
                 __MULF123:
000468 decd      	RCALL __ROUND_REPACK
000469 915f      	POP  R21
00046a 9508      	RET
                 
                 __MULF127:
00046b 0d10      	ADD  R17,R0
00046c 1d21      	ADC  R18,R1
00046d 1f39      	ADC  R19,R25
00046e c002      	RJMP __MULF128
                 __MULF126:
00046f 0d20      	ADD  R18,R0
000470 1d31      	ADC  R19,R1
                 __MULF128:
000471 1f49      	ADC  R20,R25
000472 1f59      	ADC  R21,R25
000473 9508      	RET
                 
                 __DIVF21:
000474 935f      	PUSH R21
000475 dedc      	RCALL __UNPACK
000476 3870      	CPI  R23,0x80
000477 f421      	BRNE __DIVF210
000478 2011      	TST  R1
                 __DIVF211:
000479 f40a      	BRPL __DIVF219
00047a cf9f      	RJMP __MINRES
                 __DIVF219:
00047b cfa4      	RJMP __MAXRES
                 __DIVF210:
00047c 3890      	CPI  R25,0x80
00047d f409      	BRNE __DIVF218
                 __DIVF217:
00047e cf95      	RJMP __ZERORES
                 __DIVF218:
00047f 2401      	EOR  R0,R1
000480 9408      	SEC
000481 0b97      	SBC  R25,R23
000482 f41b      	BRVC __DIVF216
000483 f3d4      	BRLT __DIVF217
000484 2000      	TST  R0
000485 cff3      	RJMP __DIVF211
                 __DIVF216:
000486 2f79      	MOV  R23,R25
000487 931f      	PUSH R17
000488 932f      	PUSH R18
000489 933f      	PUSH R19
00048a 934f      	PUSH R20
00048b 2411      	CLR  R1
00048c 2711      	CLR  R17
00048d 2722      	CLR  R18
00048e 2733      	CLR  R19
00048f 2744      	CLR  R20
000490 2755      	CLR  R21
000491 e290      	LDI  R25,32
                 __DIVF212:
000492 17ae      	CP   R26,R30
000493 07bf      	CPC  R27,R31
000494 0786      	CPC  R24,R22
000495 0741      	CPC  R20,R17
000496 f030      	BRLO __DIVF213
000497 1bae      	SUB  R26,R30
000498 0bbf      	SBC  R27,R31
000499 0b86      	SBC  R24,R22
00049a 0b41      	SBC  R20,R17
00049b 9408      	SEC
00049c c001      	RJMP __DIVF214
                 __DIVF213:
00049d 9488      	CLC
                 __DIVF214:
00049e 1f55      	ROL  R21
00049f 1f22      	ROL  R18
0004a0 1f33      	ROL  R19
0004a1 1c11      	ROL  R1
0004a2 1faa      	ROL  R26
0004a3 1fbb      	ROL  R27
0004a4 1f88      	ROL  R24
0004a5 1f44      	ROL  R20
0004a6 959a      	DEC  R25
0004a7 f751      	BRNE __DIVF212
0004a8 01f9      	MOVW R30,R18
0004a9 2d61      	MOV  R22,R1
0004aa 914f      	POP  R20
0004ab 913f      	POP  R19
0004ac 912f      	POP  R18
0004ad 911f      	POP  R17
0004ae 2366      	TST  R22
0004af f032      	BRMI __DIVF215
0004b0 0f55      	LSL  R21
0004b1 1fee      	ROL  R30
0004b2 1fff      	ROL  R31
0004b3 1f66      	ROL  R22
0004b4 957a      	DEC  R23
0004b5 f243      	BRVS __DIVF217
                 __DIVF215:
0004b6 de7f      	RCALL __ROUND_REPACK
0004b7 915f      	POP  R21
0004b8 9508      	RET
                 
                 __CMPF12:
0004b9 2399      	TST  R25
0004ba f09a      	BRMI __CMPF120
0004bb 2377      	TST  R23
0004bc f042      	BRMI __CMPF121
0004bd 1797      	CP   R25,R23
0004be f048      	BRLO __CMPF122
0004bf f429      	BRNE __CMPF121
0004c0 17ae      	CP   R26,R30
0004c1 07bf      	CPC  R27,R31
0004c2 0786      	CPC  R24,R22
0004c3 f020      	BRLO __CMPF122
0004c4 f031      	BREQ __CMPF123
                 __CMPF121:
0004c5 9498      	CLZ
0004c6 9488      	CLC
0004c7 9508      	RET
                 __CMPF122:
0004c8 9498      	CLZ
0004c9 9408      	SEC
0004ca 9508      	RET
                 __CMPF123:
0004cb 9418      	SEZ
0004cc 9488      	CLC
0004cd 9508      	RET
                 __CMPF120:
0004ce 2377      	TST  R23
0004cf f7c2      	BRPL __CMPF122
0004d0 1797      	CP   R25,R23
0004d1 f398      	BRLO __CMPF121
0004d2 f7a9      	BRNE __CMPF122
0004d3 17ea      	CP   R30,R26
0004d4 07fb      	CPC  R31,R27
0004d5 0768      	CPC  R22,R24
0004d6 f388      	BRLO __CMPF122
0004d7 f399      	BREQ __CMPF123
0004d8 cfec      	RJMP __CMPF121
                 
                 __ANEGW1:
0004d9 95f1      	NEG  R31
0004da 95e1      	NEG  R30
0004db 40f0      	SBCI R31,0
0004dc 9508      	RET
                 
                 __ANEGD1:
0004dd 95f0      	COM  R31
0004de 9560      	COM  R22
0004df 9570      	COM  R23
0004e0 95e1      	NEG  R30
0004e1 4fff      	SBCI R31,-1
0004e2 4f6f      	SBCI R22,-1
0004e3 4f7f      	SBCI R23,-1
0004e4 9508      	RET
                 
                 __CWD1:
0004e5 2f6f      	MOV  R22,R31
0004e6 0f66      	ADD  R22,R22
0004e7 0b66      	SBC  R22,R22
0004e8 2f76      	MOV  R23,R22
0004e9 9508      	RET
                 
                 __CWD2:
0004ea 2f8b      	MOV  R24,R27
0004eb 0f88      	ADD  R24,R24
0004ec 0b88      	SBC  R24,R24
0004ed 2f98      	MOV  R25,R24
0004ee 9508      	RET
                 
                 __DIVW21U:
0004ef 2400      	CLR  R0
0004f0 2411      	CLR  R1
0004f1 e190      	LDI  R25,16
                 __DIVW21U1:
0004f2 0faa      	LSL  R26
0004f3 1fbb      	ROL  R27
0004f4 1c00      	ROL  R0
0004f5 1c11      	ROL  R1
0004f6 1a0e      	SUB  R0,R30
0004f7 0a1f      	SBC  R1,R31
0004f8 f418      	BRCC __DIVW21U2
0004f9 0e0e      	ADD  R0,R30
0004fa 1e1f      	ADC  R1,R31
0004fb c001      	RJMP __DIVW21U3
                 __DIVW21U2:
0004fc 60a1      	SBR  R26,1
                 __DIVW21U3:
0004fd 959a      	DEC  R25
0004fe f799      	BRNE __DIVW21U1
0004ff 01fd      	MOVW R30,R26
000500 01d0      	MOVW R26,R0
000501 9508      	RET
                 
                 __MODW21:
000502 94e8      	CLT
000503 ffb7      	SBRS R27,7
000504 c004      	RJMP __MODW211
000505 95a0      	COM  R26
000506 95b0      	COM  R27
000507 9611      	ADIW R26,1
000508 9468      	SET
                 __MODW211:
000509 fdf7      	SBRC R31,7
00050a dfce      	RCALL __ANEGW1
00050b dfe3      	RCALL __DIVW21U
00050c 01fd      	MOVW R30,R26
00050d f40e      	BRTC __MODW212
00050e dfca      	RCALL __ANEGW1
                 __MODW212:
00050f 9508      	RET
                 
                 __PUTDP1:
000510 93ed      	ST   X+,R30
000511 93fd      	ST   X+,R31
000512 936d      	ST   X+,R22
000513 937c      	ST   X,R23
000514 9508      	RET
                 
                 __GETD1S0:
000515 81e8      	LD   R30,Y
000516 81f9      	LDD  R31,Y+1
000517 816a      	LDD  R22,Y+2
000518 817b      	LDD  R23,Y+3
000519 9508      	RET
                 
                 __GETD2S0:
00051a 81a8      	LD   R26,Y
00051b 81b9      	LDD  R27,Y+1
00051c 818a      	LDD  R24,Y+2
00051d 819b      	LDD  R25,Y+3
00051e 9508      	RET
                 
                 __PUTD1S0:
00051f 83e8      	ST   Y,R30
000520 83f9      	STD  Y+1,R31
000521 836a      	STD  Y+2,R22
000522 837b      	STD  Y+3,R23
000523 9508      	RET
                 
                 __PUTPARD1:
000524 937a      	ST   -Y,R23
000525 936a      	ST   -Y,R22
000526 93fa      	ST   -Y,R31
000527 93ea      	ST   -Y,R30
000528 9508      	RET
                 
                 __PUTPARD2:
000529 939a      	ST   -Y,R25
00052a 938a      	ST   -Y,R24
00052b 93ba      	ST   -Y,R27
00052c 93aa      	ST   -Y,R26
00052d 9508      	RET
                 
                 __CDF2U:
00052e 9468      	SET
00052f c001      	RJMP __CDF2U0
                 __CDF2:
000530 94e8      	CLT
                 __CDF2U0:
000531 d001      	RCALL __SWAPD12
000532 de6a      	RCALL __CDF1U0
                 
                 __SWAPD12:
000533 2e18      	MOV  R1,R24
000534 2f86      	MOV  R24,R22
000535 2d61      	MOV  R22,R1
000536 2e19      	MOV  R1,R25
000537 2f97      	MOV  R25,R23
000538 2d71      	MOV  R23,R1
                 
                 __SWAPW12:
000539 2e1b      	MOV  R1,R27
00053a 2fbf      	MOV  R27,R31
00053b 2df1      	MOV  R31,R1
                 
                 __SWAPB12:
00053c 2e1a      	MOV  R1,R26
00053d 2fae      	MOV  R26,R30
00053e 2de1      	MOV  R30,R1
00053f 9508      	RET
                 
                 __CPD10:
000540 9730      	SBIW R30,0
000541 4060      	SBCI R22,0
000542 4070      	SBCI R23,0
000543 9508      	RET
                 
                 __CPD02:
000544 2400      	CLR  R0
000545 160a      	CP   R0,R26
000546 060b      	CPC  R0,R27
000547 0608      	CPC  R0,R24
000548 0609      	CPC  R0,R25
000549 9508      	RET
                 
                 __CPD12:
00054a 17ea      	CP   R30,R26
00054b 07fb      	CPC  R31,R27
00054c 0768      	CPC  R22,R24
00054d 0779      	CPC  R23,R25
00054e 9508      	RET
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega16 register use summary:
r0 :  38 r1 :  36 r2 :   0 r3 :   0 r4 :   5 r5 :   3 r6 :   4 r7 :   2 
r8 :   4 r9 :   2 r10:   6 r11:   1 r12:   0 r13:   0 r14:   0 r15:   2 
r16:  15 r17:  19 r18:  12 r19:  12 r20:  22 r21:  63 r22: 105 r23: 102 
r24:  72 r25:  67 r26:  72 r27:  55 r28:  10 r29:   1 r30: 171 r31:  93 
x  :   9 y  : 151 z  :   7 
Registers used: 30 out of 35 (85.7%)

ATmega16 instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :  18 add   :  10 
adiw  :  11 and   :   5 andi  :   1 asr   :   0 bclr  :   0 bld   :   2 
brbc  :   0 brbs  :   0 brcc  :   7 brcs  :   1 break :   0 breq  :  18 
brge  :   3 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :  10 
brlt  :   3 brmi  :   9 brne  :  22 brpl  :   7 brsh  :   3 brtc  :   3 
brts  :   3 brvc  :   4 brvs  :   4 bset  :   0 bst   :   4 call  : 115 
cbi   :   0 cbr   :   1 clc   :   3 clh   :   0 cli   :   1 cln   :   0 
clr   :  39 cls   :   0 clt   :   5 clv   :   0 clz   :   2 com   :  10 
cp    :  12 cpc   :  20 cpi   :  17 cpse  :   0 dec   :  10 des   :   0 
eor   :   7 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   0 ijmp  :   0 
in    :   4 inc   :   2 jmp   :  23 ld    :  31 ldd   :  63 ldi   : 135 
lds   :   0 lpm   :   7 lsl   :  15 lsr   :   5 mov   :  41 movw  :  42 
mul   :   9 muls  :   0 mulsu :   0 neg   :   4 nop   :   0 or    :   0 
ori   :   0 out   :  27 pop   :  36 push  :  36 rcall :  30 ret   :  55 
reti  :   2 rjmp  :  45 rol   :  29 ror   :  17 sbc   :  10 sbci  :  13 
sbi   :   0 sbic  :   0 sbis  :   0 sbiw  :  12 sbr   :   3 sbrc  :   2 
sbrs  :   2 sec   :   5 seh   :   0 sei   :   1 sen   :   0 ser   :   8 
ses   :   0 set   :   4 sev   :   0 sez   :   1 sleep :   0 spm   :   0 
st    :  43 std   :  23 sts   :   0 sub   :   5 subi  :   7 swap  :   0 
tst   :  17 wdr   :   0 
Instructions used: 72 out of 116 (62.1%)

ATmega16 memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x000a9e   2684     34   2718   16384  16.6%
[.dseg] 0x000060 0x000164      0      4      4    1024   0.4%
[.eseg] 0x000000 0x000000      0      0      0     512   0.0%

Assembly complete, 0 errors, 10 warnings
