;/*******************************************************
;Project : MotorQ2
;Version : 1.00
;Date    : 1/6/2021
;Author  : Alireza Majari
;Company : P48
;Comments:
;This is Assignment#5 of Microprocessor Lab.
;kharazmi University of Tehran
;
;
;Chip type               : ATmega16
;Program type            : Application
;AVR Core Clock frequency: 12.000000 MHz
;Memory model            : Small
;External RAM size       : 0
;Data Stack size         : 256
;*******************************************************/
;
;#include <mega16.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x40
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0xB0
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x20
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x30
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0xA0
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0xB0
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x10
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;
;int delay;
;int timerStarted;
;int states[4][4] = {
;    {1, 0, 0, 1},
;    {1, 0, 1, 0},
;    {0, 1, 1, 0},
;    {0, 1, 0, 1}
;};

	.DSEG
;int currentState;
;
;// Timer1 overflow interrupt service routine
;interrupt [TIM1_OVF] void timer1_ovf_isr(void)
; 0000 0022 {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0000 0023     if(timerStarted==1) {
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
;PCODE: $00000011 VOL: 0
; 0000 0024         if(delay==0) {
;PCODE: $00000012 VOL: 0
;PCODE: $00000013 VOL: 0
; 0000 0025             PORTA.0 = states[currentState][0];
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
; 0000 0026             PORTA.1 = states[currentState][1];
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
; 0000 0027             PORTA.2 = states[currentState][2];
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
; 0000 0028             PORTA.3 = states[currentState][3];
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
;PCODE: $00000043 VOL: 0
;PCODE: $00000044 VOL: 0
;PCODE: $00000045 VOL: 0
;PCODE: $00000046 VOL: 0
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
;PCODE: $0000004A VOL: 0
; 0000 0029         }
; 0000 002A 
; 0000 002B         if(delay>5 && delay<=10) {
;PCODE: $0000004B VOL: 0
;PCODE: $0000004C VOL: 0
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
;PCODE: $0000004F VOL: 0
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
;PCODE: $00000055 VOL: 0
; 0000 002C             PORTA = 0x00;
;PCODE: $00000056 VOL: 0
;PCODE: $00000057 VOL: 0
; 0000 002D         }
; 0000 002E 
; 0000 002F         if(delay == 10){
;PCODE: $00000058 VOL: 0
;PCODE: $00000059 VOL: 0
;PCODE: $0000005A VOL: 0
;PCODE: $0000005B VOL: 0
; 0000 0030             delay = 0;
;PCODE: $0000005C VOL: 0
; 0000 0031             if(currentState<3) {
;PCODE: $0000005D VOL: 0
;PCODE: $0000005E VOL: 0
;PCODE: $0000005F VOL: 0
; 0000 0032                 ++currentState;
;PCODE: $00000060 VOL: 0
;PCODE: $00000061 VOL: 0
;PCODE: $00000062 VOL: 0
; 0000 0033             } else {
;PCODE: $00000063 VOL: 0
;PCODE: $00000064 VOL: 0
; 0000 0034                 currentState=0;
;PCODE: $00000065 VOL: 0
; 0000 0035                 timerStarted=0;
;PCODE: $00000066 VOL: 0
; 0000 0036             }
;PCODE: $00000067 VOL: 0
; 0000 0037         } else {
;PCODE: $00000068 VOL: 0
;PCODE: $00000069 VOL: 0
; 0000 0038             ++delay;
;PCODE: $0000006A VOL: 0
;PCODE: $0000006B VOL: 0
;PCODE: $0000006C VOL: 0
; 0000 0039         }
;PCODE: $0000006D VOL: 0
; 0000 003A 
; 0000 003B         TCNT1H=0xFF;
;PCODE: $0000006E VOL: 0
;PCODE: $0000006F VOL: 0
; 0000 003C         TCNT1L=0xF0;
;PCODE: $00000070 VOL: 0
;PCODE: $00000071 VOL: 0
; 0000 003D     }
; 0000 003E }
;PCODE: $00000072 VOL: 0
;PCODE: $00000073 VOL: 0
;PCODE: $00000074 VOL: 0
;PCODE: $00000075 VOL: 0
;
;void main(void)
; 0000 0041 {
;PCODE: $00000076 VOL: 0
; 0000 0042     //init timer1
; 0000 0043     TIMSK=(0<<OCIE2) | (0<<TOIE2) | (0<<TICIE1) | (0<<OCIE1A) | (0<<OCIE1B) | (1<<TOIE1) | (0<<OCIE0) | (1<<TOIE0);
;PCODE: $00000077 VOL: 0
;PCODE: $00000078 VOL: 0
; 0000 0044     TCCR0=(0<<WGM00) | (0<<COM01) | (0<<COM00) | (0<<WGM01) | (1<<CS02) | (0<<CS01) | (1<<CS00);
;PCODE: $00000079 VOL: 0
;PCODE: $0000007A VOL: 0
; 0000 0045     TCNT0=0x00;
;PCODE: $0000007B VOL: 0
;PCODE: $0000007C VOL: 0
; 0000 0046     OCR0=0x00;
;PCODE: $0000007D VOL: 0
;PCODE: $0000007E VOL: 0
; 0000 0047     TCCR1A=(0<<COM1A1) | (0<<COM1A0) | (0<<COM1B1) | (0<<COM1B0) | (0<<WGM11) | (0<<WGM10);
;PCODE: $0000007F VOL: 0
;PCODE: $00000080 VOL: 0
; 0000 0048     TCCR1B=(0<<ICNC1) | (0<<ICES1) | (0<<WGM13) | (0<<WGM12) | (1<<CS12) | (0<<CS11) | (1<<CS10);
;PCODE: $00000081 VOL: 0
;PCODE: $00000082 VOL: 0
; 0000 0049     TCNT1H=0xFF;
;PCODE: $00000083 VOL: 0
;PCODE: $00000084 VOL: 0
; 0000 004A     TCNT1L=0xF0;
;PCODE: $00000085 VOL: 0
;PCODE: $00000086 VOL: 0
; 0000 004B     MCUCR=(0<<ISC11) | (0<<ISC10) | (0<<ISC01) | (0<<ISC00);
;PCODE: $00000087 VOL: 0
;PCODE: $00000088 VOL: 0
; 0000 004C     MCUCSR=(0<<ISC2);
;PCODE: $00000089 VOL: 0
;PCODE: $0000008A VOL: 0
; 0000 004D 
; 0000 004E     #asm("sei")
;PCODE: $0000008B VOL: 0
	sei
;PCODE: $0000008C VOL: 0
; 0000 004F 
; 0000 0050     DDRC = 0x00;
;PCODE: $0000008D VOL: 0
;PCODE: $0000008E VOL: 0
; 0000 0051     PINC = 0x00;
;PCODE: $0000008F VOL: 0
;PCODE: $00000090 VOL: 0
; 0000 0052 
; 0000 0053     DDRA = 0xff;
;PCODE: $00000091 VOL: 0
;PCODE: $00000092 VOL: 0
; 0000 0054     PORTA = 0x00;
;PCODE: $00000093 VOL: 0
;PCODE: $00000094 VOL: 0
; 0000 0055 
; 0000 0056     delay = 0;
;PCODE: $00000095 VOL: 0
; 0000 0057     timerStarted = 0;
;PCODE: $00000096 VOL: 0
; 0000 0058     currentState = 0;
;PCODE: $00000097 VOL: 0
; 0000 0059 
; 0000 005A     while (1) {
;PCODE: $00000098 VOL: 0
; 0000 005B         if(PINC.2==0 &&  timerStarted==0) //when button is pressed once
;PCODE: $00000099 VOL: 0
;PCODE: $0000009A VOL: 0
;PCODE: $0000009B VOL: 0
;PCODE: $0000009C VOL: 0
;PCODE: $0000009D VOL: 0
;PCODE: $0000009E VOL: 0
;PCODE: $0000009F VOL: 0
;PCODE: $000000A0 VOL: 0
;PCODE: $000000A1 VOL: 0
; 0000 005C         {
; 0000 005D              delay = 0;
;PCODE: $000000A2 VOL: 0
; 0000 005E              timerStarted=1;
;PCODE: $000000A3 VOL: 0
;PCODE: $000000A4 VOL: 0
; 0000 005F         }
; 0000 0060     }
;PCODE: $000000A5 VOL: 0
;PCODE: $000000A6 VOL: 0
;PCODE: $000000A7 VOL: 0
; 0000 0061 }
;PCODE: $000000A8 VOL: 0
;PCODE: $000000A9 VOL: 0
;PCODE: $000000AA VOL: 0
